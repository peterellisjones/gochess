package movegeneration

import (
	"github.com/peterellisjones/gochess/bitboard"
	"github.com/peterellisjones/gochess/board"
	"github.com/peterellisjones/gochess/piece"
	"github.com/peterellisjones/gochess/side"
	"github.com/peterellisjones/gochess/square"
)

var kingMoves = [64]bitboard.Bitboard{
	0x0000000000000302, 0x0000000000000705, 0x0000000000000E0A, 0x0000000000001C14,
	0x0000000000003828, 0x0000000000007050, 0x000000000000E0A0, 0x000000000000C040,
	0x0000000000030203, 0x0000000000070507, 0x00000000000E0A0E, 0x00000000001C141C,
	0x0000000000382838, 0x0000000000705070, 0x0000000000E0A0E0, 0x0000000000C040C0,
	0x0000000003020300, 0x0000000007050700, 0x000000000E0A0E00, 0x000000001C141C00,
	0x0000000038283800, 0x0000000070507000, 0x00000000E0A0E000, 0x00000000C040C000,
	0x0000000302030000, 0x0000000705070000, 0x0000000E0A0E0000, 0x0000001C141C0000,
	0x0000003828380000, 0x0000007050700000, 0x000000E0A0E00000, 0x000000C040C00000,
	0x0000030203000000, 0x0000070507000000, 0x00000E0A0E000000, 0x00001C141C000000,
	0x0000382838000000, 0x0000705070000000, 0x0000E0A0E0000000, 0x0000C040C0000000,
	0x0003020300000000, 0x0007050700000000, 0x000E0A0E00000000, 0x001C141C00000000,
	0x0038283800000000, 0x0070507000000000, 0x00E0A0E000000000, 0x00C040C000000000,
	0x0302030000000000, 0x0705070000000000, 0x0E0A0E0000000000, 0x1C141C0000000000,
	0x3828380000000000, 0x7050700000000000, 0xE0A0E00000000000, 0xC040C00000000000,
	0x0203000000000000, 0x0507000000000000, 0x0A0E000000000000, 0x141C000000000000,
	0x2838000000000000, 0x5070000000000000, 0xA0E0000000000000, 0x40C0000000000000,
}

// AddKingMoves generates king moves
func (gen *Generator) AddKingMoves(side side.Side) {
	pc := piece.ForSide(piece.King, side)
	gen.addLookupTableMoves(pc, &kingMoves)
}

// GetKingAttackedSquares returns the set of king attacks
func GetKingAttackedSquares(bd *board.Board, attacker side.Side) bitboard.Bitboard {
	piece := piece.ForSide(piece.King, attacker)
	attackedSquares := bitboard.Empty

	bd.EachPieceOfType(piece, func(from square.Square) {
		attackedSquares |= kingMoves[from]
	})
	return attackedSquares
}
